
## Download the shapefile. 
# download.file("http://thematicmapping.org/downloads/TM_WORLD_BORDERS_SIMPL-0.3.zip" , 
#               destfile="data/world_shape_file.zip")

## Unzip this file. You can do it with R (as below), or clicking on the object you downloaded.
# system("unzip DATA/world_shape_file.zip")


# Read this shape file with the rgdal library. 
library(rgdal)
world_spdf <- readOGR( 
  dsn= paste0(data_path,"/world_shape_file/") , 
  layer="TM_WORLD_BORDERS_SIMPL-0.3",
  verbose=FALSE
)


world_spdf_sf <- st_as_sf(world_spdf)

world_spdf_sf<- world_spdf_sf %>% 
  clean_names() %>% 
  mutate(iso3 = tolower(iso3)) %>% 
  inner_join(data_pisa_long %>% filter(year == 2012, subject == "math"), by = "iso3")

world_spdf@data<- world_spdf@data %>% 
  clean_names() %>% 
  mutate(iso3 = tolower(iso3)) %>% 
  inner_join(data_pisa_long %>% filter(year == 2012, subject == "math"), by = "iso3")




leaflet(world_spdf)%>% 
  addTiles() %>% 
  setView( lat=10, lng=0 , zoom=2) %>%
  addPolygons( stroke = TRUE, fillOpacity = 0.5, smoothFactor = 0.5, 
               color = ~colorQuantile("YlOrRd", score)(score))



## Set relevant parameters ----
years <- c(2009, 2012, 2015, 2018)

## Load data ----
## This only needs to be done once
# data_pisa <- load_student(year = "all") 
# saveRDS(data_pisa, file = paste0(rds_path, "pisa_data.RDS"))

## Load pisa data
data_pisa <- readRDS(file = paste0(rds_path, "pisa_data.RDS")) %>%
  filter(year %in% years) %>% 
  # mutate(year = as.numeric(year)) %>% 
  select(year, country,
         school_id, student_id, 
         math, read, science, stu_wgt, escs) %>% 
  left_join(countrycode, by = "country") %>% 
  clean_df



## Prepare long data format
data_pisa_long <- data_pisa %>% 
  tidyr::pivot_longer(cols = c("math", "read", "science"),
                      names_to = "subject",
                      values_to = "score")
## Read teacher salary data
# data_sal <- read.csv(here("data/DP_LIVE_03092022114234265.csv")) %>% 
#   clean_df %>% 
#   filter(frequency == "a",
#          subject == "lowsry_15yrexp",
#          measure == "idx2010") %>% 
#   rename(year = time) 

## Read GDP data
# data_gdp <- read_excel(here("data/GM-GDP per capita - Dataset - v27.xlsx"),
#                        sheet = "data-for-countries-etc-by-year") %>% 
#   clean_df %>% 
#   rename(year = time) %>% 
#   filter(year %in% years)
#   


## Calculate correlation between ESCS and scores
cor <- data_pisa_long %>% 
  group_by(year, country, subject) %>% 
  group_modify(~correlate(.x$escs, .x$score,
                          method = "pearson",
                          use = "pairwise.complete.obs",
                          quiet = TRUE)) %>% 
  rename(correlation = x) %>% 
  select(-term)

cor_wt <- data_pisa_long %>% 
  group_by(year, country, subject) %>% 
  group_modify(~as_tibble(
    cor.wt(data = cbind(.x$escs, .x$score),
           w = .x$stu_wgt)[["r"]][2, 1])) 
# rename(correlation = x) %>% 
# select(-term)


## Load world map long lat data
data_world <- ggplot2::map_data('world')
data_world <- clean_df(data_world)
head(data_world)


## Transform country codes to common codes ISO3
ctr_codes_pisa <- data_pisa_long %>% 
  distinct(country)

data(countrySynonyms)
ctr_codes_iso3 <- countrySynonyms %>% 
  clean_df %>% 
  select(iso3, name1) %>% 
  filter(!is.na(iso3)) %>% 
  rename(country_name = name1)
rm(countrySynonyms)

matched_codes <- ctr_codes_pisa %>% 
  inner_join(ctr_codes_iso3, by = c("country" = "iso3")) %>% 
  mutate(ori_codes = country)

unmatched_codes <- ctr_codes_pisa %>% 
  anti_join(ctr_codes_iso3, by = c("country" = "iso3"))

unmatched_codes <- unmatched_codes %>% 
  mutate(iso3 = case_when(
    country == "qcn" ~ "chn",
    country == "qch" ~ "chn",
    country == "tap" ~ "twn",
    country == "ksv" ~ "kos"
  )) 

unmatched_codes <- unmatched_codes %>% 
  inner_join(ctr_codes_iso3, by = c("iso3" = "iso3")) %>% 
  rename(ori_codes = country) 

final_ctr_codes <- 
  bind_rows(matched_codes, unmatched_codes) %>% 
  rename(iso3 = country)

data_pisa_long <- data_pisa_long %>% 
  inner_join(final_ctr_codes %>% 
               select(iso3, ori_codes), 
             by = c("country" = "ori_codes"))


